{"version":3,"sources":["components/MemeCreator/MemeCreator.css","components/MemeLists/MemeList/MemeList.css","components/header/Header.css","components/MemeLists/MemeLists.css","components/Layout/Layout.css","components/header/Header.js","components/MemeCreator/MemeCreator.js","components/MemeLists/MemeList/MemeList.js","components/MemeLists/MemeLists.js","containers/voteEngine/VoteEngine.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MemeCreator","Inner","MemeList","Img","Header","MemeLists","Layout","react_default","a","createElement","className","classes","style","color","props","type","name","onChange","urlChanged","value","imageUrl","placeholder","nameChanged","onClick","createMemeClicked","fontWeight","fontSize","src","image","alt","aettosAmount","changed","clicked","listOfMemes","sort","b","map","meme","MemeLists_MemeList_MemeList","key","id","inputChanged","bind","voteClicked","VoteEngine","state","newMemeInputs","interactWithBlockchain","_callee","contractSource","client","contract","calledGet","decodeGet","regenerator_default","wrap","_context","prev","next","Ae","url","internalUrl","keypair","secretKey","publicKey","networkId","sent","getContractInstance","contractAddress","call","callStatic","catch","error","console","log","decode","err","stop","voteHandler","memeId","_this","setState","prevState","newListOfMemes","Object","toConsumableArray","memeIndex","findIndex","_ref2","newMeme","objectSpread","onChangeHandler","event","_ref3","target","newNameHandler","updatedInputs","newUrlHandler","createMemeHandler","Math","random","push","this","components_MemeCreator_MemeCreator","components_MemeLists_MemeLists","Component","components_header_Header","voteEngine_VoteEngine","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14c2c535.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MemeCreator\":\"MemeCreator__MemeCreator__KMn3A\",\"Inner\":\"MemeCreator__Inner__3XUOU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MemeList\":\"MemeList__MemeList__1WG56\",\"Img\":\"MemeList__Img__1gxBS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header__Header__qj6EO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MemeLists\":\"MemeLists__MemeLists__4Xivv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout__Layout__1SGjM\"};","import React from 'react';\r\nimport classes from './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={classes.Header}>\r\n            <h1 style={{color: \"white\"}}>Meme Voting</h1>\r\n        </div>);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Auxilliary from '../../hoc/withAuxilliary';\r\nimport classes from './MemeCreator.css'\r\n\r\nconst MemeCreator = (props) => {\r\n    return (\r\n        <div className={classes.MemeCreator}>\r\n            <form>\r\n                <div className={classes.Inner}>\r\n                    <input type='text' name='meme-url' onChange={props.urlChanged} value={props.value.imageUrl} placeholder='Input Meme Url' />\r\n                    <input type='text' name='username' onChange={props.nameChanged} value={props.value.name} placeholder='Username' />\r\n                </div>\r\n\r\n            </form>\r\n            <button onClick={props.createMemeClicked}>Create Meme</button>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MemeCreator;","import React from 'react';\r\nimport classes from './MemeList.css'\r\n\r\nconst MemeList = (props) => {\r\n    return(\r\n        <div className={classes.MemeList}>\r\n            <p style={{fontWeight: \"bold\", fontSize: \"15px\"}}>{props.name}</p>\r\n            <img className={classes.Img} src={props.image} alt={props.name}/>\r\n            <p>{props.aettosAmount}  Aettos</p>\r\n            <input \r\n                type=\"number\" \r\n                name=\"vote-amount\" \r\n                placeholder=\"Amount of aeons\"\r\n                onChange={props.changed}\r\n                value={props.value}/>\r\n            <button onClick={props.clicked}>Vote</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MemeList;","import React from 'react';\r\nimport classes from './MemeLists.css'\r\nimport MemeList from './MemeList/MemeList'\r\n\r\nconst MemeLists = (props) => {\r\n    return (\r\n        <div className={classes.MemeLists}>\r\n            {\r\n                props.listOfMemes.sort((a, b) => {\r\n                    return b.aettosAmount - a.aettosAmount;\r\n                })\r\n                .map((meme) => {\r\n                    return <MemeList\r\n                                key={meme.id}\r\n                                name={meme.name}\r\n                                image={meme.image}\r\n                                aettosAmount={meme.aettosAmount} \r\n                                value={meme.value}\r\n                                changed={props.inputChanged.bind(this, meme.id)}\r\n                                clicked={props.voteClicked.bind(this, meme.id)}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MemeLists;","import React, { Component } from 'react';\r\nimport MemeCreator from '../../components/MemeCreator/MemeCreator';\r\nimport MemeLists from '../../components/MemeLists/MemeLists';\r\n//import { Crypto } from '@aeternity/aepp-sdk/es';\r\nimport Ae from '@aeternity/aepp-sdk/es/ae/universal';\r\n\r\n\r\nclass VoteEngine extends Component {\r\n\r\n    state = {\r\n        listOfMemes: [{ id: \"gj7\", name: \"James\", image: \"https://images.pexels.com/photos/20787/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350\", aettosAmount: 0, value: \"\" },\r\n        { id: \"vjj8\", name: \"Gift\", image: \"https://picsum.photos/id/237/200\", aettosAmount: 2, value: \"\" }],\r\n        newMemeInputs: {\r\n            name: '',\r\n            imageUrl: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.interactWithBlockchain();\r\n    }\r\n\r\n    interactWithBlockchain = async () => {\r\n\r\n        const contractSource = `\r\n    contract MemeVote = \r\n\r\n    record meme = {\r\n    creatorAddress: address,\r\n    voteCount: int,\r\n    name: string,\r\n    url: string\r\n    }\r\n    \r\n    record state = { \r\n    memes: map(int, meme),\r\n    memesLength: int\r\n    }\r\n\r\n    entrypoint init() = { \r\n    memes = {},\r\n    memesLength = 0\r\n    }\r\n\r\n    entrypoint getMeme(index: int): meme = \r\n    switch(Map.lookup(index, state.memes))\r\n        None => abort(\"Index not found\")\r\n        Some(y) => y\r\n    \r\n    stateful entrypoint setMeme(memeUrl: string, uname: string) =\r\n    let meme = { creatorAddress = Call.caller, name = uname, url = memeUrl, voteCount = 0}\r\n    let id = getMemesLength() + 1\r\n    put(state { memes[id] = meme, memesLength = id} )\r\n    \r\n\r\n    entrypoint getMemesLength(): int =\r\n    state.memesLength\r\n    \r\n    stateful entrypoint voteMeme(index: int) = \r\n    let meme = getMeme(index)\r\n    Chain.spend(meme.creatorAddress, Call.value)\r\n    let updatedVoteCount = meme.voteCount + Call.value\r\n    let updatedMemes = state.memes{ [index].voteCount = updatedVoteCount }\r\n    put(state { memes = updatedMemes })\r\n    `\r\n        let client = null;\r\n\r\n        client = await Ae({\r\n            url: 'https://sdk-testnet.aepps.com', \r\n            internalUrl: 'https://sdk-testnet.aepps.com',\r\n            keypair: {secretKey: \"ak_2bKhoFWgQ9os4x8CaeDTHZRGzUcSwcXYUrM12gZHKTdyreGRgG\", publicKey: \"ak_2bKhoFWgQ9os4x8CaeDTHZRGzUcSwcXYUrM12gZHKTdyreGRgG\"},\r\n            networkId: 'ae_uat'\r\n        });\r\n        //client = await Ae.Aepp();\r\n\r\n\r\n        //const contractAddress = 'ct_2cMdAVT6HyxZhFsvYvojxrDuMnvuPGLhEPPq65HEcuPoUi7JDE';\r\n        const contractAddress = 'ct_2bNtx4F9CbxEH2LFnWqR7ggTwKTrdTGKLBmVhrh6H6jKKw9T6z';\r\n\r\n        //const height = await client.height();\r\n        const contract = await client.getContractInstance(contractSource, { contractAddress });\r\n        const calledGet = await contract.call('getMemesLength', [], { callStatic: true }).catch((error) => console.log(error));\r\n        console.log('calledGet', calledGet);\r\n\r\n        const decodeGet = await calledGet.decode().catch(err => console.log(err));\r\n        console.log('decodeGet', decodeGet);\r\n        console.log(client);\r\n    };\r\n\r\n    voteHandler = (memeId) => {\r\n\r\n        this.setState((prevState, props) => {\r\n\r\n            const newListOfMemes = [\r\n                ...prevState.listOfMemes\r\n            ]\r\n\r\n            const memeIndex = newListOfMemes.findIndex(({ id }) => id === memeId);\r\n\r\n            let newMeme = {\r\n                ...newListOfMemes[memeIndex]\r\n            }\r\n\r\n            newMeme.aettosAmount = prevState.listOfMemes[memeIndex].aettosAmount + prevState.listOfMemes[memeIndex].value;\r\n\r\n            newListOfMemes[memeIndex] = newMeme;\r\n\r\n            return {\r\n                listOfMemes: newListOfMemes\r\n            };\r\n        });\r\n    };\r\n\r\n    onChangeHandler = (memeId, event) => {\r\n\r\n        const newListOfMemes = [\r\n            ...this.state.listOfMemes\r\n        ]\r\n\r\n        const memeIndex = newListOfMemes.findIndex(({ id }) => id === memeId);\r\n\r\n        let newMeme = {\r\n            ...newListOfMemes[memeIndex]\r\n        }\r\n\r\n        newMeme.value = +event.target.value;\r\n\r\n        newListOfMemes[memeIndex] = newMeme;\r\n\r\n        this.setState({ listOfMemes: newListOfMemes });\r\n\r\n    };\r\n\r\n    newNameHandler = (event) => {\r\n\r\n        const updatedInputs = {\r\n            ...this.state.newMemeInputs\r\n        }\r\n        updatedInputs.name = event.target.value;\r\n\r\n        this.setState({ newMemeInputs: updatedInputs });\r\n    };\r\n\r\n    newUrlHandler = (event) => {\r\n\r\n        const updatedInputs = {\r\n            ...this.state.newMemeInputs\r\n        }\r\n        updatedInputs.imageUrl = event.target.value;\r\n\r\n        this.setState({ newMemeInputs: updatedInputs });\r\n    };\r\n\r\n    createMemeHandler = () => {\r\n\r\n        if (!this.state.newMemeInputs.imageUrl && !this.state.newMemeInputs.name) {\r\n            return;\r\n        }\r\n\r\n        const newListOfMemes = [\r\n            ...this.state.listOfMemes\r\n        ];\r\n\r\n        const meme = {\r\n            id: this.state.newMemeInputs.name + ((Math.random() * 100) + 1),\r\n            name: this.state.newMemeInputs.name,\r\n            image: this.state.newMemeInputs.imageUrl,\r\n            aettosAmount: 0,\r\n            value: \"\"\r\n        }\r\n\r\n        newListOfMemes.push(meme);\r\n        this.setState({ listOfMemes: newListOfMemes });\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <MemeCreator\r\n                    value={this.state.newMemeInputs}\r\n                    createMemeClicked={this.createMemeHandler}\r\n                    urlChanged={this.newUrlHandler}\r\n                    nameChanged={this.newNameHandler} />\r\n                <MemeLists\r\n                    listOfMemes={this.state.listOfMemes}\r\n                    inputChanged={this.onChangeHandler}\r\n                    voteClicked={this.voteHandler} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VoteEngine;","import React from  'react';\r\n\r\nimport Header from '../header/Header';\r\nimport VoteEngine from '../../containers/voteEngine/VoteEngine';\r\nimport classes from './Layout.css';\r\n\r\nconst Layout = () => {\r\n    return(\r\n        <div className={classes.Layout}>\r\n            <Header />\r\n            <VoteEngine />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Layout;","import React from 'react';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n  return <Layout/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}